{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Eduar\\OneDrive\\Área de Trabalho\\csharp\\ProEventos\\Front\\ProEventos-App\\src\\app\\eventos\\eventos.component.ts"],"sourcesContent":["import { Component, OnInit, TemplateRef } from '@angular/core';\nimport { EventoService } from '../services/evento.service';\nimport { Evento } from '../models/Evento';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport {}\n\n@Component({\n  selector: 'app-eventos',\n  templateUrl: './eventos.component.html',\n  styleUrls: ['./eventos.component.scss']\n})\nexport class EventosComponent implements OnInit {\n   \n  modalRef?: BsModalRef;\n  public eventos: Evento[] =[];\n  larguraImagem: number = 150;\n  margemImagem: number = 2;\n  exibirImagem: boolean = true;\n  private _filtroLista: string = '';\n  public eventosFiltrados: any;\n\n  public get filtroLista():string{return this._filtroLista;}\n\n  public set  filtroLista(value:string){\n    this._filtroLista= value;\n    this.eventosFiltrados= this.filtroLista? this.filtrarEventos(this._filtroLista): this.eventos;\n  }\n\n  public getEventos(): void{\n    this.eventoService.getEvento().subscribe({\n      next: (eventos: Evento[])=> {\n        this.eventos = eventos;\n        this.eventosFiltrados= eventos;\n      },\n      error: (error: any)=> {\n        this.spinner.hide();\n        this.toastr.error(\"Erro ao carregar os eventos\", \"Erro\");\n      },\n\n      complete: ()=> this.spinner.hide() });}\n\n  public filtrarEventos(filtraPor:string):any{\n    filtraPor=filtraPor.toLowerCase();\n    return this.eventos.filter(\n      (evento:any) =>evento.tema.toLocaleLowerCase().indexOf(filtraPor)!==-1 ||\n          evento.local.toLocaleLowerCase().indexOf(filtraPor)!==-1 \n    )\n  }\n  constructor(\n    private eventoService: EventoService, \n    private modalService: BsModalService,\n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService\n    ) { }\n\n  public alterarImagem(): void{\n    this.exibirImagem = !this.exibirImagem;\n  }\n  public ngOnInit() {\n    this.getEventos();\n\n     this.spinner.show();\n\n    setTimeout(() => {\n    \n    }, 5000);\n  }\n\n  openModal(template: TemplateRef<any>) {\n    this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n  }\n \n  confirm(): void {\n    this.modalRef?.hide();\n    this.toastr.success('O evento foi deletado com sucesso!', 'Deletado');\n  }\n \n  decline(): void {\n    this.modalRef?.hide();\n  }\n\n\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}